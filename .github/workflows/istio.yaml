name: istio

on:
  push:
    branches: [ istio ]

env:
  PROJECT: istio
  PROJECT2: proxy
  BRANCH: 1.16.5
  Dockerfile: Dockerfile-istio

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y%m%d%H%M')"

    - name: Check out repo code
      uses: actions/checkout@v2

    - name: Check out build code
      uses: actions/checkout@v2
      with:
        repository: istio/${{ env.PROJECT }}
        ref: ${{ env.BRANCH }}
        path: ${{ env.PROJECT }}

    - name: Check out build code proxy
      uses: actions/checkout@v2
      with:
        repository: istio/${{ env.PROJECT2 }}
        ref: ${{ env.BRANCH }}
        path: ${{ env.PROJECT2 }}

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.20

    - name: Setup Ninja
      uses: ashutoshvarma/setup-ninja@master
      with:
        dest: /usr/local/bin

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1.5.1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USER }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Cache Docker layers
      uses: actions/cache@v2
      id: cache
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx

    - name: build istio proxy binary
      run: |
        cd ${{ env.PROJECT2 }}
        sed -i '/.*attributegen.wasm.*/d' Makefile.core.mk 
        sed -i '/.*metadata_exchange.wasm.*/d' Makefile.core.mk 
        make build_wasm
        tree .

    # - name: build istio binary
    #   run: |
    #     cd ${{ env.PROJECT }}
    #     TARGET_ARCH=amd64 TARGET_OUT_LINUX=linux/amd64 make build-linux
    #     # TARGET_ARCH=arm64 TARGET_OUT_LINUX=linux/arm64 make build-linux
    #     find . -name "*envoy_bootstrap*" -exec cp {} out/ \;
    #     tree out

    # - name: Docker Buildx istio (push)
    #   run: |
    #     cd ${{ env.PROJECT }}
    #     docker buildx build \
    #       --cache-from "type=local,src=/tmp/.buildx-cache" \
    #       --platform linux/amd64,linux/arm64 \
    #       --output "type=image,push=true" \
    #       --tag yylt/proxyv2:${{ steps.date.outputs.date }} \
    #       --file ../${{ env.Dockerfile }} ./out

